

# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_9739 = Integer(9739); _sage_const_497 = Integer(497); _sage_const_1768 = Integer(1768); _sage_const_1804 = Integer(1804); _sage_const_5368 = Integer(5368); _sage_const_4726 = Integer(4726); _sage_const_6534 = Integer(6534); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_0 = Integer(0); _sage_const_16 = Integer(16)
from sage.all import *
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import hashlib

# Define the curve parameters
p = _sage_const_9739 
F = GF(p)
E = EllipticCurve(F, [_sage_const_497 , _sage_const_1768 ])
G = E(_sage_const_1804 , _sage_const_5368 )

# Alice's public key x-coordinate and Bob's secret
x_QA = _sage_const_4726 
nB = _sage_const_6534 

# Function to find y given x on the curve
def find_y(x):
    y_squared = (x**_sage_const_3  + _sage_const_497 *x + _sage_const_1768 ) % p
    # Since p ≡ 3 (mod 4), we can use the formula y = ±y_squared^((p+1)/4) mod p
    y = pow(y_squared, (p+_sage_const_1 )//_sage_const_4 , p)
    return y

# Find y coordinate of QA
y_QA = find_y(x_QA)

# Create the point QA
QA = E(x_QA, y_QA)

# Calculate the shared secret
S = nB * QA
shared_secret = S[_sage_const_0 ]  # We only need the x-coordinate

print(f"Shared secret: {shared_secret}")

# Decryption function (as provided)
def is_pkcs7_padded(message):
    padding = message[-message[-_sage_const_1 ]:]
    return all(padding[i] == len(padding) for i in range(_sage_const_0 , len(padding)))

def decrypt_flag(shared_secret: int, iv: str, ciphertext: str):
    # Derive AES key from shared secret
    sha1 = hashlib.sha1()
    sha1.update(str(shared_secret).encode('ascii'))
    key = sha1.digest()[:_sage_const_16 ]
    # Decrypt flag
    ciphertext = bytes.fromhex(ciphertext)
    iv = bytes.fromhex(iv)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = cipher.decrypt(ciphertext)
    if is_pkcs7_padded(plaintext):
        return unpad(plaintext, _sage_const_16 ).decode('ascii')
    else:
        return plaintext.decode('ascii')

# Decrypt the flag
iv = 'cd9da9f1c60925922377ea952afc212c'
ciphertext = 'febcbe3a3414a730b125931dccf912d2239f3e969c4334d95ed0ec86f6449ad8'

flag = decrypt_flag(shared_secret, iv, ciphertext)
print(f"Flag: {flag}")

