

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_64 = Integer(64); _sage_const_257 = Integer(257); _sage_const_0x10001 = Integer(0x10001); _sage_const_2 = Integer(2); _sage_const_10082 = Integer(10082); _sage_const_48747 = Integer(48747); _sage_const_17960 = Integer(17960); _sage_const_55638 = Integer(55638); _sage_const_37012 = Integer(37012); _sage_const_51876 = Integer(51876); _sage_const_10128 = Integer(10128); _sage_const_37750 = Integer(37750); _sage_const_7608 = Integer(7608); _sage_const_58952 = Integer(58952); _sage_const_33296 = Integer(33296); _sage_const_25463 = Integer(25463); _sage_const_38900 = Integer(38900); _sage_const_85 = Integer(85); _sage_const_65248 = Integer(65248); _sage_const_42153 = Integer(42153); _sage_const_44966 = Integer(44966); _sage_const_31594 = Integer(31594); _sage_const_40676 = Integer(40676); _sage_const_56828 = Integer(56828); _sage_const_30325 = Integer(30325); _sage_const_38502 = Integer(38502); _sage_const_65083 = Integer(65083); _sage_const_7497 = Integer(7497); _sage_const_2667 = Integer(2667); _sage_const_54022 = Integer(54022); _sage_const_24029 = Integer(24029); _sage_const_32162 = Integer(32162); _sage_const_57267 = Integer(57267); _sage_const_12253 = Integer(12253); _sage_const_6668 = Integer(6668); _sage_const_5181 = Integer(5181); _sage_const_14906 = Integer(14906); _sage_const_51655 = Integer(51655); _sage_const_61347 = Integer(61347); _sage_const_4722 = Integer(4722); _sage_const_22227 = Integer(22227); _sage_const_23606 = Integer(23606); _sage_const_63183 = Integer(63183); _sage_const_52860 = Integer(52860); _sage_const_1670 = Integer(1670); _sage_const_31085 = Integer(31085); _sage_const_42633 = Integer(42633); _sage_const_47197 = Integer(47197); _sage_const_7255 = Integer(7255); _sage_const_16150 = Integer(16150); _sage_const_9574 = Integer(9574); _sage_const_62956 = Integer(62956); _sage_const_26742 = Integer(26742); _sage_const_57998 = Integer(57998); _sage_const_49467 = Integer(49467); _sage_const_31224 = Integer(31224); _sage_const_60073 = Integer(60073); _sage_const_12730 = Integer(12730); _sage_const_41419 = Integer(41419); _sage_const_41042 = Integer(41042); _sage_const_53032 = Integer(53032); _sage_const_16339 = Integer(16339); _sage_const_32913 = Integer(32913); _sage_const_16351 = Integer(16351); _sage_const_34283 = Integer(34283); _sage_const_47845 = Integer(47845); _sage_const_3617 = Integer(3617); _sage_const_35718 = Integer(35718); _sage_const_53751 = Integer(53751); _sage_const_21252 = Integer(21252); _sage_const_55954 = Integer(55954); _sage_const_16345 = Integer(16345); _sage_const_60990 = Integer(60990); _sage_const_2822 = Integer(2822); _sage_const_56279 = Integer(56279); _sage_const_37048 = Integer(37048); _sage_const_36153 = Integer(36153); _sage_const_52141 = Integer(52141); _sage_const_2121 = Integer(2121); _sage_const_56565 = Integer(56565); _sage_const_48112 = Integer(48112); _sage_const_43755 = Integer(43755); _sage_const_12951 = Integer(12951); _sage_const_22539 = Integer(22539); _sage_const_29478 = Integer(29478); _sage_const_28421 = Integer(28421); _sage_const_62175 = Integer(62175); _sage_const_10265 = Integer(10265); _sage_const_36378 = Integer(36378); _sage_const_21305 = Integer(21305); _sage_const_42402 = Integer(42402); _sage_const_26359 = Integer(26359); _sage_const_939 = Integer(939); _sage_const_60690 = Integer(60690); _sage_const_1161 = Integer(1161); _sage_const_65097 = Integer(65097); _sage_const_34505 = Integer(34505); _sage_const_19777 = Integer(19777); _sage_const_29652 = Integer(29652); _sage_const_42868 = Integer(42868); _sage_const_49148 = Integer(49148); _sage_const_38296 = Integer(38296); _sage_const_31916 = Integer(31916); _sage_const_25606 = Integer(25606); _sage_const_18700 = Integer(18700); _sage_const_12655 = Integer(12655); _sage_const_35631 = Integer(35631); _sage_const_64674 = Integer(64674); _sage_const_29018 = Integer(29018); _sage_const_21021 = Integer(21021); _sage_const_14865 = Integer(14865); _sage_const_40196 = Integer(40196); _sage_const_14036 = Integer(14036); _sage_const_40278 = Integer(40278); _sage_const_37209 = Integer(37209); _sage_const_35585 = Integer(35585); _sage_const_34344 = Integer(34344); _sage_const_33030 = Integer(33030); _sage_const_285 = Integer(285); _sage_const_58536 = Integer(58536); _sage_const_56121 = Integer(56121); _sage_const_40899 = Integer(40899); _sage_const_24262 = Integer(24262); _sage_const_62326 = Integer(62326); _sage_const_57433 = Integer(57433); _sage_const_5765 = Integer(5765); _sage_const_24456 = Integer(24456); _sage_const_28859 = Integer(28859); _sage_const_45170 = Integer(45170); _sage_const_14799 = Integer(14799); _sage_const_21567 = Integer(21567); _sage_const_55484 = Integer(55484); _sage_const_11507 = Integer(11507)
n = _sage_const_64 
# plaintext modulus
p = _sage_const_257 
# ciphertext modulus
q = _sage_const_0x10001 
# bound for error term
error_bound = int(floor((q/p)/_sage_const_2 ))
V = VectorSpace(GF(q), n)
# Decryption:
S =  vector(ZZ, [_sage_const_10082 , _sage_const_48747 , _sage_const_17960 , _sage_const_55638 , _sage_const_37012 , _sage_const_51876 , _sage_const_10128 , _sage_const_37750 , _sage_const_7608 , _sage_const_58952 , _sage_const_33296 , _sage_const_25463 , _sage_const_38900 , _sage_const_85 , _sage_const_65248 , _sage_const_42153 , _sage_const_44966 , _sage_const_31594 , _sage_const_40676 , _sage_const_56828 , _sage_const_30325 , _sage_const_38502 , _sage_const_65083 , _sage_const_7497 , _sage_const_2667 , _sage_const_54022 , _sage_const_24029 , _sage_const_32162 , _sage_const_57267 , _sage_const_12253 , _sage_const_6668 , _sage_const_5181 , _sage_const_14906 , _sage_const_51655 , _sage_const_61347 , _sage_const_4722 , _sage_const_22227 , _sage_const_23606 , _sage_const_63183 , _sage_const_52860 , _sage_const_1670 , _sage_const_31085 , _sage_const_42633 , _sage_const_47197 , _sage_const_7255 , _sage_const_16150 , _sage_const_9574 , _sage_const_62956 , _sage_const_26742 , _sage_const_57998 , _sage_const_49467 , _sage_const_31224 , _sage_const_60073 , _sage_const_12730 , _sage_const_41419 , _sage_const_41042 , _sage_const_53032 , _sage_const_16339 , _sage_const_32913 , _sage_const_16351 , _sage_const_34283 , _sage_const_47845 , _sage_const_3617 , _sage_const_35718 ])

A =  vector(ZZ, [_sage_const_53751 , _sage_const_21252 , _sage_const_55954 , _sage_const_16345 , _sage_const_60990 , _sage_const_2822 , _sage_const_56279 , _sage_const_37048 , _sage_const_36153 , _sage_const_52141 , _sage_const_2121 , _sage_const_56565 , _sage_const_48112 , _sage_const_43755 , _sage_const_12951 , _sage_const_22539 , _sage_const_29478 , _sage_const_28421 , _sage_const_62175 , _sage_const_10265 , _sage_const_36378 , _sage_const_21305 , _sage_const_42402 , _sage_const_26359 , _sage_const_939 , _sage_const_60690 , _sage_const_1161 , _sage_const_65097 , _sage_const_34505 , _sage_const_19777 , _sage_const_29652 , _sage_const_42868 , _sage_const_49148 , _sage_const_38296 , _sage_const_31916 , _sage_const_25606 , _sage_const_18700 , _sage_const_12655 , _sage_const_35631 , _sage_const_64674 , _sage_const_29018 , _sage_const_21021 , _sage_const_14865 , _sage_const_40196 , _sage_const_14036 , _sage_const_40278 , _sage_const_37209 , _sage_const_35585 , _sage_const_34344 , _sage_const_33030 , _sage_const_285 , _sage_const_58536 , _sage_const_56121 , _sage_const_40899 , _sage_const_24262 , _sage_const_62326 , _sage_const_57433 , _sage_const_5765 , _sage_const_24456 , _sage_const_28859 , _sage_const_45170 , _sage_const_14799 , _sage_const_21567 , _sage_const_55484 ])
b =  _sage_const_11507 

"""
1. compute x = (b - A.dot_product(S)) % q
2. interpret x as integer (not mod q), then remove scaling and noise Note: this centered modular reduction must produce a result between (−q/2,q/2](−q/2,q/2] as opposed to usual modular reduction producing a result between [0,q−1][0,q−1]
3. compute m = x mod p
"""
def decrypt(S, ciphertext):
    A, b = ciphertext
    q_half = q // _sage_const_2 
    
    # Step 1: Compute raw difference
    x = (b - A.dot_product(S)) % q
    
    # Step 2: Perform centered modular reduction [-q/2, q/2)
    if x > q_half:
        x = x - q  # bring into the negative range
    
    # Now x ∈ (-q/2, q/2]

    # Step 3: Recover plaintext m by reducing modulo p
    m_recovered = Integer(x % p)
    
    return m_recovered
ciphertext = (A, b)
m_recovered = decrypt(S, ciphertext)
print("m_recovered:", m_recovered)

